services:
  nats-server:
    container_name: nats-server
    image: nats:latest
    ports:
      - "${NATS_PORT}:4222"
      - "${NATS_PORT_HTTP}:8222"

  gateway:
    container_name: gateway
    build: ./services/gateway
    ports:
      - "${GATEWAY_PORT}:3000"
    volumes:
      - ./services/gateway/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=${GATEWAY_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
    depends_on:
      - nats-server

  products:
    container_name: products
    build: ./services/products
    ports:
      - "${PRODUCTS_PORT}:3001"
    volumes:
      - ./services/products/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=${PRODUCTS_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - DATABASE_URL=${PRODUCTS_DATABASE_URL}
      - BASE_URL=${PRODUCTS_BASE_URL}
    depends_on:
      - nats-server

  orders-db:
    container_name: orders-db
    image: postgres:16.2
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ordersdb
    ports:
      - "${ORDERS_DB_PORT}:5432" #should be hidden in production
    volumes:
      - ./services/orders/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ordersdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  orders:
    container_name: orders
    build: ./services/orders
    ports:
      - "${ORDERS_PORT}:3002"
    volumes:
      - ./services/orders/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=${ORDERS_PORT}
      - NATS_SERVERS=${NATS_SERVERS}
      - BASE_URL=${ORDERS_BASE_URL}
      - DATABASE_URL=${ORDERS_DATABASE_URL}
    depends_on:
      orders-db:
        condition: service_healthy
      nats-server:
        condition: service_started