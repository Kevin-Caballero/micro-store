@startuml sequence
title Authentication & Order Flow - Request-Response Pattern

skinparam backgroundColor #F7F8FC

actor "Client" as client
participant "Gateway" as gateway
participant "NATS" as nats
participant "Auth Service" as auth
participant "Products Service" as products
participant "Orders Service" as orders
database "Auth DB" as auth_db
database "Products DB" as products_db
database "Orders DB" as orders_db

== User Registration ==

client -> gateway : POST /auth/register\n{email, name, password}
activate gateway

gateway -> nats : send({ cmd: 'register' }, userData)
activate nats

nats -> auth : MessagePattern({ cmd: 'register' })
activate auth

auth -> auth_db : createUser(userData)
activate auth_db
auth_db --> auth : user created
deactivate auth_db

auth --> nats : return user data
deactivate auth

nats --> gateway : response: user data
deactivate nats

gateway --> client : 201 Created\n{user data}
deactivate gateway

== User Login ==

client -> gateway : POST /auth/login\n{email, password}
activate gateway

gateway -> nats : send({ cmd: 'login' }, {email, password})
activate nats

nats -> auth : MessagePattern({ cmd: 'login' })
activate auth

auth -> auth_db : validateUser(email, password)
activate auth_db
auth_db --> auth : user validated
deactivate auth_db

auth -> auth : generateJWT(user)
auth --> nats : return {token, user}
deactivate auth

nats --> gateway : response: {token, user}
deactivate nats

gateway --> client : 200 OK\n{token, user}
deactivate gateway

== Protected Order Creation ==

client -> gateway : POST /orders\n{productId, quantity}\nAuthorization: Bearer token
activate gateway

gateway -> nats : send({ cmd: 'verify' }, {token})
activate nats

nats -> auth : MessagePattern({ cmd: 'verify' })
activate auth

auth -> auth : validateJWT(token)

alt token is valid
    auth --> nats : return {user, newToken}
    deactivate auth
    
    nats --> gateway : response: {user, newToken}
    deactivate nats
    
    gateway -> nats : send({ cmd: 'find_one_product' }, {productId})
    activate nats
    
    nats -> products : MessagePattern({ cmd: 'find_one_product' })
    activate products
    
    products -> products_db : findProduct(productId)
    activate products_db
    products_db --> products : product data
    deactivate products_db
    
    alt product available and sufficient stock
        products --> nats : return product data
        deactivate products
        
        nats --> gateway : response: product data
        deactivate nats
        
        gateway -> nats : send({ cmd: 'create_order' }, {productId, quantity, userId})
        activate nats
        
        nats -> orders : MessagePattern({ cmd: 'create_order' })
        activate orders
        
        orders -> orders_db : createOrder({productId, quantity, userId})
        activate orders_db
        orders_db --> orders : order created
        deactivate orders_db
        
        orders --> nats : return order data
        deactivate orders
        
        nats --> gateway : response: order data
        deactivate nats
        
        gateway --> client : 201 Created\n{order data}
    else insufficient stock
        products --> nats : throw RpcException("Insufficient stock")
        deactivate products
        
        nats --> gateway : error: Insufficient stock
        deactivate nats
        
        gateway --> client : 400 Bad Request\n{error: "Insufficient stock"}
    end

else token is invalid
    auth --> nats : throw RpcException("Invalid token")
    deactivate auth
    
    nats --> gateway : error: Invalid token
    deactivate nats
    
    gateway --> client : 401 Unauthorized\n{error: "Invalid token"}
end

deactivate gateway

@enduml
